{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{qo1X:function(t,e,r){\"use strict\";r.r(e),r.d(e,\"default\",function(){return i});var n=r(\"20ZU\"),i={name:\"markers\",init(){var t=this;return Object(n.a)(function*(){const{svgCanvas:e}=t,{BatchCommand:r,RemoveElementCommand:n,InsertElementCommand:i}=e.history,{$id:a,addSVGElementsFromJson:o}=e,s=[\"start\",\"mid\",\"end\"],l=[\"line\",\"path\",\"polyline\",\"polygon\"],c={nomarker:{},leftarrow:{element:\"path\",attr:{d:\"M0,50 L100,90 L70,50 L100,10 Z\"}},rightarrow:{element:\"path\",attr:{d:\"M100,50 L0,90 L30,50 L0,10 Z\"}},box:{element:\"path\",attr:{d:\"M20,20 L20,80 L80,80 L80,20 Z\"}},mcircle:{element:\"circle\",attr:{r:30,cx:50,cy:50}}};[\"leftarrow\",\"rightarrow\",\"box\",\"mcircle\"].forEach(t=>{c[t+\"_o\"]=c[t]});const m=(t,r)=>{const n=t.getAttribute(r);if(!n)return null;const i=n.match(/\\(#(.*)\\)/);return i&&2===i.length?e.getElement(i[1]):null},u=(t,e)=>{a(\"marker_panel\").style.display=t?\"block\":\"none\",t&&e&&s.forEach(t=>{var r;const n=m(e,\"marker-\"+t);null!=n&&null!==(r=n.attributes)&&void 0!==r&&r.se_type?a(\"\".concat(t,\"_marker_list_opts\")).setAttribute(\"value\",n.attributes.se_type.value):a(\"\".concat(t,\"_marker_list_opts\")).setAttribute(\"value\",\"nomarker\")})},d=(t,r)=>{const n=e.getSelectedElements();let i=e.getElement(t);if(i)return;if(\"\"===r||\"nomarker\"===r)return;const a=n[0].getAttribute(\"stroke\");if(!c[r])return void console.error(\"unknown marker type: \".concat(r));i=o({element:\"marker\",attr:{id:t,markerUnits:\"strokeWidth\",orient:\"auto\",style:\"pointer-events:none\",se_type:r}});const s=o(c[r]),l=\"_o\"===r.substr(-2)?\"none\":a;return s.setAttribute(\"fill\",l),s.setAttribute(\"stroke\",a),s.setAttribute(\"stroke-width\",10),i.append(s),i.setAttribute(\"viewBox\",\"0 0 100 100\"),i.setAttribute(\"markerWidth\",5),i.setAttribute(\"markerHeight\",5),i.setAttribute(\"refX\",50),i.setAttribute(\"refY\",50),e.findDefs().append(i),i},b=(t,a)=>{const l=e.getSelectedElements();if(0===l.length)return;const c=\"marker-\"+t,u=l[0],b=m(u,c);b&&b.remove(),u.removeAttribute(c);let g=a;if(\"\"===g&&(g=\"nomarker\"),\"nomarker\"===g)return void e.call(\"changed\",l);const k=\"mkr_\"+t+\"_\"+u.id;d(k,g),e.changeSelectedAttribute(c,\"url(#\"+k+\")\"),\"line\"===u.tagName&&\"mid\"===t&&(t=>{if(\"line\"!==t.tagName)return t;const a=Number(t.getAttribute(\"x1\")),l=Number(t.getAttribute(\"x2\")),c=Number(t.getAttribute(\"y1\")),m=Number(t.getAttribute(\"y2\")),{id:u}=t,d=o({element:\"polyline\",attr:{points:a+\",\"+c+\" \"+(a+l)/2+\",\"+(c+m)/2+\" \"+l+\",\"+m,stroke:t.getAttribute(\"stroke\"),\"stroke-width\":t.getAttribute(\"stroke-width\"),fill:\"none\",opacity:t.getAttribute(\"opacity\")||1}});s.forEach(e=>{const r=\"marker-\"+e;t.getAttribute(r)&&d.setAttribute(r,t.getAttribute(r))});const b=new r;b.addSubCommand(new n(t,t.parentNode)),b.addSubCommand(new i(d)),t.insertAdjacentElement(\"afterend\",d),t.remove(),e.clearSelection(),d.id=u,e.addToSelection([d]),e.addCommandToHistory(b)})(u),e.call(\"changed\",l)};return{name:t.i18next.t(\"\".concat(name,\":name\")),callback(){const t=document.createElement(\"template\");let e='<div id=\"marker_panel\">';s.forEach(t=>{e+='<se-list id=\"'.concat(t,'_marker_list_opts\" title=\"tools.').concat(t,'_marker_list_opts\" label=\"\" width=\"22px\" height=\"22px\">'),Object.entries(c).forEach(r=>{let[n,i]=r;e+='<se-list-item id=\"mkr_'.concat(t,\"_\").concat(n,'\" value=\"').concat(n,'\" title=\"tools.mkr_').concat(n,'\" src=\"').concat(n,'.svg\" img-height=\"22px\"></se-list-item>')}),e+=\"</se-list>\"}),e+=\"</div>\",t.innerHTML=e,a(\"tools_top\").appendChild(t.content.cloneNode(!0)),u(!1),s.forEach(t=>{a(\"\".concat(t,\"_marker_list_opts\")).addEventListener(\"change\",e=>{b(t,e.detail.value)})})},selectedChanged(t){0===t.elems.length&&u(!1),t.elems.forEach(e=>{e&&l.includes(e.tagName)&&t.selectedElement&&!t.multiselected?u(!0,e):u(!1)})},elementChanged(t){const r=t.elems[0];r&&(r.getAttribute(\"marker-start\")||r.getAttribute(\"marker-mid\")||r.getAttribute(\"marker-end\"))&&((t=>{const e=t.getAttribute(\"stroke\");s.forEach(r=>{const n=m(t,\"marker-\"+r);if(!n)return;if(!n.attributes.se_type)return;const i=n.lastElementChild;if(!i)return;const a=i.getAttribute(\"fill\"),o=i.getAttribute(\"stroke\");a&&\"none\"!==a&&i.setAttribute(\"fill\",e),o&&\"none\"!==o&&i.setAttribute(\"stroke\",e)})})(r),(t=>{const r=e.getSelectedElements();s.forEach(n=>{const i=\"marker-\"+n,a=m(t,i);if(!a||!a.attributes.se_type)return;const o=t.getAttribute(i);if(o){const s=t.id.length,l=o.substr(-s-1,s);if(t.id!==l){const o=\"mkr_\"+n+\"_\"+t.id;d(o,a.attributes.se_type.value),e.changeSelectedAttribute(i,\"url(#\"+o+\")\"),e.call(\"changed\",r)}}})})(r))}}})()}}}}]);","name":"8.8de598c4837f91bd5416.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[8],{\n\n/***/ \"qo1X\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return t; });\n/* harmony import */ var C_Projects_lib_workspace_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"20ZU\");\n\n\n/**\n * @file ext-markers.js\n *\n * @license Apache-2.0\n *\n * @copyright 2010 Will Schleter based on ext-arrows.js by Copyright(c) 2010 Alexis Deveria\n * @copyright 2021 OptimistikSAS\n *\n * This extension provides for the addition of markers to the either end\n * or the middle of a line, polyline, path, polygon.\n *\n * Markers are graphics\n *\n * to simplify the coding and make the implementation as robust as possible,\n * markers are not shared - every object has its own set of markers.\n * this relationship is maintained by a naming convention between the\n * ids of the markers and the ids of the object\n *\n * The following restrictions exist for simplicty of use and programming\n *    objects and their markers to have the same color\n *    marker size is fixed\n *    an application specific attribute - se_type - is added to each marker element\n *        to store the type of marker\n *\n * @todo\n *    remove some of the restrictions above\n *\n*/\nvar t = {\n  name: \"markers\",\n\n  init() {\n    var _this = this;\n\n    return Object(C_Projects_lib_workspace_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(function* () {\n      const {\n        svgCanvas: t\n      } = _this,\n            {\n        BatchCommand: e,\n        RemoveElementCommand: r,\n        InsertElementCommand: n\n      } = t.history,\n            {\n        $id: a,\n        addSVGElementsFromJson: i\n      } = t,\n            o = [\"start\", \"mid\", \"end\"],\n            s = [\"line\", \"path\", \"polyline\", \"polygon\"],\n            l = {\n        nomarker: {},\n        leftarrow: {\n          element: \"path\",\n          attr: {\n            d: \"M0,50 L100,90 L70,50 L100,10 Z\"\n          }\n        },\n        rightarrow: {\n          element: \"path\",\n          attr: {\n            d: \"M100,50 L0,90 L30,50 L0,10 Z\"\n          }\n        },\n        box: {\n          element: \"path\",\n          attr: {\n            d: \"M20,20 L20,80 L80,80 L80,20 Z\"\n          }\n        },\n        mcircle: {\n          element: \"circle\",\n          attr: {\n            r: 30,\n            cx: 50,\n            cy: 50\n          }\n        }\n      };\n      [\"leftarrow\", \"rightarrow\", \"box\", \"mcircle\"].forEach(t => {\n        l[t + \"_o\"] = l[t];\n      });\n\n      const getLinked = (e, r) => {\n        const n = e.getAttribute(r);\n        if (!n) return null;\n        const a = n.match(/\\(#(.*)\\)/);\n        return a && 2 === a.length ? t.getElement(a[1]) : null;\n      },\n            showPanel = (t, e) => {\n        a(\"marker_panel\").style.display = t ? \"block\" : \"none\", t && e && o.forEach(t => {\n          var r;\n          const n = getLinked(e, \"marker-\" + t);\n          null != n && null !== (r = n.attributes) && void 0 !== r && r.se_type ? a(\"\".concat(t, \"_marker_list_opts\")).setAttribute(\"value\", n.attributes.se_type.value) : a(\"\".concat(t, \"_marker_list_opts\")).setAttribute(\"value\", \"nomarker\");\n        });\n      },\n            addMarker = (e, r) => {\n        const n = t.getSelectedElements();\n        let a = t.getElement(e);\n        if (a) return;\n        if (\"\" === r || \"nomarker\" === r) return;\n        const o = n[0].getAttribute(\"stroke\");\n        if (!l[r]) return void console.error(\"unknown marker type: \".concat(r));\n        a = i({\n          element: \"marker\",\n          attr: {\n            id: e,\n            markerUnits: \"strokeWidth\",\n            orient: \"auto\",\n            style: \"pointer-events:none\",\n            se_type: r\n          }\n        });\n        const s = i(l[r]),\n              c = \"_o\" === r.substr(-2) ? \"none\" : o;\n        return s.setAttribute(\"fill\", c), s.setAttribute(\"stroke\", o), s.setAttribute(\"stroke-width\", 10), a.append(s), a.setAttribute(\"viewBox\", \"0 0 100 100\"), a.setAttribute(\"markerWidth\", 5), a.setAttribute(\"markerHeight\", 5), a.setAttribute(\"refX\", 50), a.setAttribute(\"refY\", 50), t.findDefs().append(a), a;\n      },\n            setMarker = (a, s) => {\n        const l = t.getSelectedElements();\n        if (0 === l.length) return;\n        const c = \"marker-\" + a,\n              m = l[0],\n              u = getLinked(m, c);\n        u && u.remove(), m.removeAttribute(c);\n        let d = s;\n        if (\"\" === d && (d = \"nomarker\"), \"nomarker\" === d) return void t.call(\"changed\", l);\n        const b = \"mkr_\" + a + \"_\" + m.id;\n        addMarker(b, d), t.changeSelectedAttribute(c, \"url(#\" + b + \")\"), \"line\" === m.tagName && \"mid\" === a && (a => {\n          if (\"line\" !== a.tagName) return a;\n          const s = Number(a.getAttribute(\"x1\")),\n                l = Number(a.getAttribute(\"x2\")),\n                c = Number(a.getAttribute(\"y1\")),\n                m = Number(a.getAttribute(\"y2\")),\n                {\n            id: u\n          } = a,\n                d = i({\n            element: \"polyline\",\n            attr: {\n              points: s + \",\" + c + \" \" + (s + l) / 2 + \",\" + (c + m) / 2 + \" \" + l + \",\" + m,\n              stroke: a.getAttribute(\"stroke\"),\n              \"stroke-width\": a.getAttribute(\"stroke-width\"),\n              fill: \"none\",\n              opacity: a.getAttribute(\"opacity\") || 1\n            }\n          });\n          o.forEach(t => {\n            const e = \"marker-\" + t;\n            a.getAttribute(e) && d.setAttribute(e, a.getAttribute(e));\n          });\n          const b = new e();\n          b.addSubCommand(new r(a, a.parentNode)), b.addSubCommand(new n(d)), a.insertAdjacentElement(\"afterend\", d), a.remove(), t.clearSelection(), d.id = u, t.addToSelection([d]), t.addCommandToHistory(b);\n        })(m), t.call(\"changed\", l);\n      };\n\n      return {\n        name: _this.i18next.t(\"\".concat(name, \":name\")),\n\n        callback() {\n          const t = document.createElement(\"template\");\n          let e = '<div id=\"marker_panel\">';\n          o.forEach(t => {\n            e += '<se-list id=\"'.concat(t, '_marker_list_opts\" title=\"tools.').concat(t, '_marker_list_opts\" label=\"\" width=\"22px\" height=\"22px\">'), Object.entries(l).forEach(r => {\n              let [n, a] = r;\n              e += '<se-list-item id=\"mkr_'.concat(t, \"_\").concat(n, '\" value=\"').concat(n, '\" title=\"tools.mkr_').concat(n, '\" src=\"').concat(n, '.svg\" img-height=\"22px\"></se-list-item>');\n            }), e += \"</se-list>\";\n          }), e += \"</div>\", t.innerHTML = e, a(\"tools_top\").appendChild(t.content.cloneNode(!0)), showPanel(!1), o.forEach(t => {\n            a(\"\".concat(t, \"_marker_list_opts\")).addEventListener(\"change\", e => {\n              setMarker(t, e.detail.value);\n            });\n          });\n        },\n\n        selectedChanged(t) {\n          0 === t.elems.length && showPanel(!1), t.elems.forEach(e => {\n            e && s.includes(e.tagName) && t.selectedElement && !t.multiselected ? showPanel(!0, e) : showPanel(!1);\n          });\n        },\n\n        elementChanged(e) {\n          const r = e.elems[0];\n          r && (r.getAttribute(\"marker-start\") || r.getAttribute(\"marker-mid\") || r.getAttribute(\"marker-end\")) && ((t => {\n            const e = t.getAttribute(\"stroke\");\n            o.forEach(r => {\n              const n = getLinked(t, \"marker-\" + r);\n              if (!n) return;\n              if (!n.attributes.se_type) return;\n              const a = n.lastElementChild;\n              if (!a) return;\n              const i = a.getAttribute(\"fill\"),\n                    o = a.getAttribute(\"stroke\");\n              i && \"none\" !== i && a.setAttribute(\"fill\", e), o && \"none\" !== o && a.setAttribute(\"stroke\", e);\n            });\n          })(r), (e => {\n            const r = t.getSelectedElements();\n            o.forEach(n => {\n              const a = \"marker-\" + n,\n                    i = getLinked(e, a);\n              if (!i || !i.attributes.se_type) return;\n              const o = e.getAttribute(a);\n\n              if (o) {\n                const s = e.id.length,\n                      l = o.substr(-s - 1, s);\n\n                if (e.id !== l) {\n                  const o = \"mkr_\" + n + \"_\" + e.id;\n                  addMarker(o, i.attributes.se_type.value), t.changeSelectedAttribute(a, \"url(#\" + o + \")\"), t.call(\"changed\", r);\n                }\n              }\n            });\n          })(r));\n        }\n\n      };\n    })();\n  }\n\n};\n //# sourceMappingURL=ext-markers.js.map\n\n/***/ })\n\n}]);","inputSourceMap":null}