{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{CruP:function(t,e,o){\"use strict\";o.r(e),o.d(e,\"default\",function(){return s});var n=o(\"20ZU\");const i=\"polystar\",l=function(){var t=Object(n.a)(function*(t){let e;const o=t.configObj.pref(\"lang\");try{e=yield function(t){switch(t){case\"./locale/en.js\":return Promise.resolve().then(function(){return a});case\"./locale/fr.js\":return Promise.resolve().then(function(){return r});case\"./locale/zh-CN.js\":return Promise.resolve().then(function(){return c});default:return new Promise(function(e,o){(\"function\"==typeof queueMicrotask?queueMicrotask:setTimeout)(o.bind(null,new Error(\"Unknown variable dynamic import: \"+t)))})}}(\"./locale/\".concat(o,\".js\"))}catch(t){console.warn(\"Missing translation (\".concat(o,\") for \").concat(i,\" - using 'en'\")),e=yield Promise.resolve().then(function(){return a})}t.i18next.addResourceBundle(o,i,e.default)});return function(e){return t.apply(this,arguments)}}();var s={name:i,init(){var t=this;return Object(n.a)(function*(){const e=t,{svgCanvas:o}=e,{ChangeElementCommand:n}=o.history,s=t=>{o.undoMgr.addCommandToHistory(t)},{$id:a}=o;let r,c,u;yield l(e);const d=(t,e)=>{t?a(\"\".concat(e,\"_panel\")).style.removeProperty(\"display\"):a(\"\".concat(e,\"_panel\")).style.display=\"none\"},p=(t,e)=>{o.changeSelectedAttribute(t,e),o.call(\"changed\",r)},g=t=>1/Math.tan(t),b=t=>1/Math.cos(t);return{name:e.i18next.t(\"\".concat(i,\":name\")),callback(){const t=\"\".concat(i,\":title\"),e=\"\".concat(i,\":buttons.0.title\"),l=\"\".concat(i,\":buttons.1.title\"),c='\\n            <se-flyingbutton id=\"tools_polygon\" title=\"'.concat(t,'\">\\n              <se-button id=\"tool_star\" title=\"').concat(e,'\" src=\"star.svg\">\\n              </se-button>\\n              <se-button id=\"tool_polygon\" title=\"').concat(l,'\" src=\"polygon.svg\">\\n              </se-button>\\n            </se-flyingbutton>\\n          ');o.insertChildAtIndex(a(\"tools_left\"),c,10),a(\"tool_star\").addEventListener(\"click\",()=>{this.leftPanel.updateLeftPanel(\"tool_star\")&&(o.setMode(\"star\"),d(!0,\"star\"),d(!1,\"polygon\"))}),a(\"tool_polygon\").addEventListener(\"click\",()=>{this.leftPanel.updateLeftPanel(\"tool_polygon\")&&(o.setMode(\"polygon\"),d(!0,\"polygon\"),d(!1,\"star\"))});const u=\"\".concat(i,\":contextTools.0.label\"),h=\"\".concat(i,\":contextTools.0.title\"),f=\"\".concat(i,\":contextTools.1.label\"),m=\"\".concat(i,\":contextTools.1.title\"),y=\"\".concat(i,\":contextTools.2.label\"),M=\"\".concat(i,\":contextTools.2.title\"),A=\"\".concat(i,\":contextTools.3.label\"),P=\"\".concat(i,\":contextTools.3.title\"),v=document.createElement(\"template\");v.innerHTML='\\n          <div id=\"star_panel\">\\n            <se-spin-input id=\"starNumPoints\" label=\"'.concat(u,'\" min=1 step=1 value=5 title=\"').concat(h,'\">\\n            </se-spin-input>\\n            <se-spin-input id=\"RadiusMultiplier\" label=\"').concat(f,'\" min=1 step=2.5 value=3 title=\"').concat(m,'\">\\n            </se-spin-input>\\n            <se-spin-input id=\"radialShift\" min=0 step=1 value=0 label=\"').concat(y,'\" title=\"').concat(M,'\">\\n            </se-spin-input>\\n          </div>\\n          <div id=\"polygon_panel\">\\n            <se-spin-input size=\"3\" id=\"polySides\" min=1 step=1 value=5 label=\"').concat(A,'\" title=\"').concat(P,'\">\\n            </se-spin-input>\\n          </div>\\n        '),a(\"tools_top\").appendChild(v.content.cloneNode(!0)),d(!1,\"star\"),d(!1,\"polygon\"),a(\"starNumPoints\").addEventListener(\"change\",t=>{p(\"point\",t.target.value);const e=t.target.value;let o=r.length;for(;o--;){const t=r[o];if(t.hasAttribute(\"r\")){const o=t.getAttribute(\"point\"),i=t.getAttribute(\"points\"),l=t.getAttribute(\"radialshift\");let a=0,r=0;if(t.points){const c=t.points,u=c.numberOfItems;for(let t=0;t<u;++t){const e=c.getItem(t);a+=parseFloat(e.x),r+=parseFloat(e.y)}const d=a/u,p=r/u,g=Number(t.getAttribute(\"r\")),b=g/t.getAttribute(\"starRadiusMultiplier\");let h=\"\";for(let t=0;e>=t;t++){let o=2*Math.PI*(t/e);o-=Math.PI/2;let n=g*Math.cos(o)+d,i=g*Math.sin(o)+p;h+=n+\",\"+i+\" \",isNaN(b)||(o=2*Math.PI*(t/e)+Math.PI/e,o-=Math.PI/2,o+=l,n=b*Math.cos(o)+d,i=b*Math.sin(o)+p,h+=n+\",\"+i+\" \")}t.setAttribute(\"points\",h),s(new n(t,{point:o,points:i}))}}}}),a(\"RadiusMultiplier\").addEventListener(\"change\",t=>{p(\"starRadiusMultiplier\",t.target.value)}),a(\"radialShift\").addEventListener(\"change\",t=>{p(\"radialshift\",t.target.value)}),a(\"polySides\").addEventListener(\"change\",t=>{p(\"sides\",t.target.value);const e=t.target.value;let o=r.length;for(;o--;){const t=r[o];if(t.hasAttribute(\"edge\")){const o=t.getAttribute(\"sides\"),i=t.getAttribute(\"points\");let l=0,a=0;if(t.points){const r=t.points,c=r.numberOfItems;for(let t=0;t<c;++t){const e=r.getItem(t);l+=parseFloat(e.x),a+=parseFloat(e.y)}const u=l/c,d=a/c,p=t.getAttribute(\"edge\")/2*g(Math.PI/e)*b(Math.PI/e);let h=\"\";for(let t=0;e>=t;t++){const o=2*Math.PI*t/e;h+=p*Math.cos(o)+u+\",\"+(p*Math.sin(o)+d)+\" \"}t.setAttribute(\"points\",h),s(new n(t,{sides:o,points:i}))}}}})},mouseDown(t){if(\"star\"===o.getMode()){const e=o.getColor(\"fill\"),n=o.getColor(\"stroke\"),i=o.getStrokeWidth();return c=!0,u=o.addSVGElementsFromJson({element:\"polygon\",attr:{cx:t.start_x,cy:t.start_y,id:o.getNextId(),shape:\"star\",point:a(\"starNumPoints\").value,r:0,radialshift:a(\"radialShift\").value,r2:0,orient:\"point\",fill:e,strokecolor:n,strokeWidth:i}}),{started:!0}}if(\"polygon\"===o.getMode()){const e=o.getColor(\"fill\"),n=o.getColor(\"stroke\"),i=o.getStrokeWidth();return c=!0,u=o.addSVGElementsFromJson({element:\"polygon\",attr:{cx:t.start_x,cy:t.start_y,id:o.getNextId(),shape:\"regularPoly\",sides:a(\"polySides\").value,orient:\"x\",edge:0,fill:e,strokecolor:n,strokeWidth:i}}),{started:!0}}},mouseMove(t){if(c){if(\"star\"===o.getMode()){const e=Number(u.getAttribute(\"cx\")),o=Number(u.getAttribute(\"cy\")),n=Number(u.getAttribute(\"point\")),i=u.getAttribute(\"orient\"),l=u.getAttribute(\"fill\"),s=u.getAttribute(\"strokecolor\"),a=Number(u.getAttribute(\"strokeWidth\")),r=Number(u.getAttribute(\"radialshift\"));let c=t.mouse_x,d=t.mouse_y;const p=Math.sqrt((c-e)*(c-e)+(d-o)*(d-o))/1.5,g=document.getElementById(\"RadiusMultiplier\").value,b=p/g;u.setAttribute(\"r\",p),u.setAttribute(\"r2\",b),u.setAttribute(\"starRadiusMultiplier\",g);let h=\"\";for(let t=0;n>=t;t++){let l=2*Math.PI*(t/n);\"point\"===i?l-=Math.PI/2:\"edge\"===i&&(l=l+Math.PI/n-Math.PI/2),c=p*Math.cos(l)+e,d=p*Math.sin(l)+o,h+=c+\",\"+d+\" \",isNaN(b)||(l=2*Math.PI*(t/n)+Math.PI/n,\"point\"===i?l-=Math.PI/2:\"edge\"===i&&(l=l+Math.PI/n-Math.PI/2),l+=r,c=b*Math.cos(l)+e,d=b*Math.sin(l)+o,h+=c+\",\"+d+\" \")}return u.setAttribute(\"points\",h),u.setAttribute(\"fill\",l),u.setAttribute(\"stroke\",s),u.setAttribute(\"stroke-width\",a),u.getAttribute(\"shape\"),{started:!0}}if(\"polygon\"===o.getMode()){const e=Number(u.getAttribute(\"cx\")),o=Number(u.getAttribute(\"cy\")),n=Number(u.getAttribute(\"sides\")),i=u.getAttribute(\"fill\"),l=u.getAttribute(\"strokecolor\"),s=Number(u.getAttribute(\"strokeWidth\"));let a=t.mouse_x,r=t.mouse_y;const c=Math.sqrt((a-e)*(a-e)+(r-o)*(r-o))/1.5;u.setAttribute(\"edge\",c);const d=c/2*g(Math.PI/n)*b(Math.PI/n);let p=\"\";for(let t=0;n>=t;t++){const i=2*Math.PI*t/n;a=d*Math.cos(i)+e,r=d*Math.sin(i)+o,p+=a+\",\"+r+\" \"}return u.setAttribute(\"points\",p),u.setAttribute(\"fill\",i),u.setAttribute(\"stroke\",l),u.setAttribute(\"stroke-width\",s),{started:!0}}}},mouseUp:()=>\"star\"===o.getMode()?{keep:\"0\"!==u.getAttribute(\"r\"),element:u}:\"polygon\"===o.getMode()?{keep:\"0\"!==u.getAttribute(\"edge\"),element:u}:void 0,selectedChanged(t){r=t.elems;let e=r.length;for(;e--;){const o=r[e];o&&\"star\"===o.getAttribute(\"shape\")?t.selectedElement&&!t.multiselected?(a(\"starNumPoints\").value=o.getAttribute(\"point\"),a(\"radialShift\").value=o.getAttribute(\"radialshift\"),d(!0,\"star\")):d(!1,\"star\"):o&&\"regularPoly\"===o.getAttribute(\"shape\")?t.selectedElement&&!t.multiselected?(a(\"polySides\").value=o.getAttribute(\"sides\"),d(!0,\"polygon\")):d(!1,\"polygon\"):(d(!1,\"star\"),d(!1,\"polygon\"))}}}})()}},a=Object.freeze({__proto__:null,default:{name:\"star\",title:\"Polygone/Star Tool\",buttons:[{title:\"Star Tool\"},{title:\"Polygon Tool\"}],contextTools:[{title:\"Number of Sides\",label:\"points\"},{title:\"Pointiness\",label:\"Pointiness\"},{title:\"Twists the star\",label:\"Radial Shift\"},{title:\"Number of Sides\",label:\"sides\"}]}}),r=Object.freeze({__proto__:null,default:{name:\"etoile\",title:\"Outil Polygone/Etoile\",buttons:[{title:\"Outil Etoile\"},{title:\"Outil Polygone\"}],contextTools:[{title:\"Nombre de c\\xf4t\\xe9s\",label:\"points\"},{title:\"Pr\\xe9cision\",label:\"Pr\\xe9cision\"},{title:\"Torsion Etoile\",label:\"D\\xe9calage Radial\"},{title:\"Nombre de c\\xf4t\\xe9s\",label:\"c\\xf4t\\xe9s\"}]}}),c=Object.freeze({__proto__:null,default:{name:\"\\u661f\\u5f62\",title:\"Polygone/Star Tool\",buttons:[{title:\"\\u661f\\u5f62\\u5de5\\u5177\"},{title:\"\\u591a\\u8fb9\\u5f62\\u5de5\\u5177\"}],contextTools:[{title:\"\\u9876\\u70b9\",label:\"\\u9876\\u70b9\"},{title:\"\\u949d\\u5ea6\",label:\"\\u949d\\u5ea6\"},{title:\"\\u5f84\\u5411\",label:\"\\u5f84\\u5411\"},{title:\"\\u8fb9\\u6570\",label:\"\\u8fb9\\u6570\"}]}})}}]);","name":"12.7d7b92b78129f7e03e0a.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[12],{\n\n/***/ \"CruP\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return e; });\n/* harmony import */ var C_Projects_lib_workspace_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"20ZU\");\n\n\n/**\n * @file ext-polystar.js\n *\n *\n * @copyright 2010 CloudCanvas, Inc. All rights reserved\n * @copyright 2021 Optimistik SAS, Inc. All rights reserved\n * @license MIT\n *\n */\nconst t = \"polystar\",\n      loadExtensionTranslation = /*#__PURE__*/function () {\n  var _ref = Object(C_Projects_lib_workspace_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(function* (e) {\n    let l;\n    const s = e.configObj.pref(\"lang\");\n\n    try {\n      l = yield function __variableDynamicImportRuntime0__(t) {\n        switch (t) {\n          case \"./locale/en.js\":\n            return Promise.resolve().then(function () {\n              return o;\n            });\n\n          case \"./locale/fr.js\":\n            return Promise.resolve().then(function () {\n              return n;\n            });\n\n          case \"./locale/zh-CN.js\":\n            return Promise.resolve().then(function () {\n              return i;\n            });\n\n          default:\n            return new Promise(function (e, o) {\n              (\"function\" == typeof queueMicrotask ? queueMicrotask : setTimeout)(o.bind(null, new Error(\"Unknown variable dynamic import: \" + t)));\n            });\n        }\n      }(\"./locale/\".concat(s, \".js\"));\n    } catch (e) {\n      console.warn(\"Missing translation (\".concat(s, \") for \").concat(t, \" - using 'en'\")), l = yield Promise.resolve().then(function () {\n        return o;\n      });\n    }\n\n    e.i18next.addResourceBundle(s, t, l.default);\n  });\n\n  return function loadExtensionTranslation(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar e = {\n  name: t,\n\n  init() {\n    var _this = this;\n\n    return Object(C_Projects_lib_workspace_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(function* () {\n      const e = _this,\n            {\n        svgCanvas: o\n      } = e,\n            {\n        ChangeElementCommand: n\n      } = o.history,\n            addToHistory = t => {\n        o.undoMgr.addCommandToHistory(t);\n      },\n            {\n        $id: i\n      } = o;\n\n      let l, s, a;\n      yield loadExtensionTranslation(e);\n\n      const showPanel = (t, e) => {\n        t ? i(\"\".concat(e, \"_panel\")).style.removeProperty(\"display\") : i(\"\".concat(e, \"_panel\")).style.display = \"none\";\n      },\n            setAttr = (t, e) => {\n        o.changeSelectedAttribute(t, e), o.call(\"changed\", l);\n      },\n            cot = t => 1 / Math.tan(t),\n            sec = t => 1 / Math.cos(t);\n\n      return {\n        name: e.i18next.t(\"\".concat(t, \":name\")),\n\n        callback() {\n          const e = \"\".concat(t, \":title\"),\n                s = \"\".concat(t, \":buttons.0.title\"),\n                a = \"\".concat(t, \":buttons.1.title\"),\n                r = '\\n            <se-flyingbutton id=\"tools_polygon\" title=\"'.concat(e, '\">\\n              <se-button id=\"tool_star\" title=\"').concat(s, '\" src=\"star.svg\">\\n              </se-button>\\n              <se-button id=\"tool_polygon\" title=\"').concat(a, '\" src=\"polygon.svg\">\\n              </se-button>\\n            </se-flyingbutton>\\n          ');\n          o.insertChildAtIndex(i(\"tools_left\"), r, 10), i(\"tool_star\").addEventListener(\"click\", () => {\n            this.leftPanel.updateLeftPanel(\"tool_star\") && (o.setMode(\"star\"), showPanel(!0, \"star\"), showPanel(!1, \"polygon\"));\n          }), i(\"tool_polygon\").addEventListener(\"click\", () => {\n            this.leftPanel.updateLeftPanel(\"tool_polygon\") && (o.setMode(\"polygon\"), showPanel(!0, \"polygon\"), showPanel(!1, \"star\"));\n          });\n          const c = \"\".concat(t, \":contextTools.0.label\"),\n                u = \"\".concat(t, \":contextTools.0.title\"),\n                d = \"\".concat(t, \":contextTools.1.label\"),\n                g = \"\".concat(t, \":contextTools.1.title\"),\n                p = \"\".concat(t, \":contextTools.2.label\"),\n                b = \"\".concat(t, \":contextTools.2.title\"),\n                h = \"\".concat(t, \":contextTools.3.label\"),\n                m = \"\".concat(t, \":contextTools.3.title\"),\n                f = document.createElement(\"template\");\n          f.innerHTML = '\\n          <div id=\"star_panel\">\\n            <se-spin-input id=\"starNumPoints\" label=\"'.concat(c, '\" min=1 step=1 value=5 title=\"').concat(u, '\">\\n            </se-spin-input>\\n            <se-spin-input id=\"RadiusMultiplier\" label=\"').concat(d, '\" min=1 step=2.5 value=3 title=\"').concat(g, '\">\\n            </se-spin-input>\\n            <se-spin-input id=\"radialShift\" min=0 step=1 value=0 label=\"').concat(p, '\" title=\"').concat(b, '\">\\n            </se-spin-input>\\n          </div>\\n          <div id=\"polygon_panel\">\\n            <se-spin-input size=\"3\" id=\"polySides\" min=1 step=1 value=5 label=\"').concat(h, '\" title=\"').concat(m, '\">\\n            </se-spin-input>\\n          </div>\\n        '), i(\"tools_top\").appendChild(f.content.cloneNode(!0)), showPanel(!1, \"star\"), showPanel(!1, \"polygon\"), i(\"starNumPoints\").addEventListener(\"change\", t => {\n            setAttr(\"point\", t.target.value);\n            const e = t.target.value;\n            let o = l.length;\n\n            for (; o--;) {\n              const t = l[o];\n\n              if (t.hasAttribute(\"r\")) {\n                const o = t.getAttribute(\"point\"),\n                      i = t.getAttribute(\"points\"),\n                      l = t.getAttribute(\"radialshift\");\n                let s = 0,\n                    a = 0;\n\n                if (t.points) {\n                  const r = t.points,\n                        c = r.numberOfItems;\n\n                  for (let t = 0; t < c; ++t) {\n                    const e = r.getItem(t);\n                    s += parseFloat(e.x), a += parseFloat(e.y);\n                  }\n\n                  const u = s / c,\n                        d = a / c,\n                        g = Number(t.getAttribute(\"r\")),\n                        p = g / t.getAttribute(\"starRadiusMultiplier\");\n                  let b = \"\";\n\n                  for (let t = 0; e >= t; t++) {\n                    let o = 2 * Math.PI * (t / e);\n                    o -= Math.PI / 2;\n                    let n = g * Math.cos(o) + u,\n                        i = g * Math.sin(o) + d;\n                    b += n + \",\" + i + \" \", isNaN(p) || (o = 2 * Math.PI * (t / e) + Math.PI / e, o -= Math.PI / 2, o += l, n = p * Math.cos(o) + u, i = p * Math.sin(o) + d, b += n + \",\" + i + \" \");\n                  }\n\n                  t.setAttribute(\"points\", b), addToHistory(new n(t, {\n                    point: o,\n                    points: i\n                  }));\n                }\n              }\n            }\n          }), i(\"RadiusMultiplier\").addEventListener(\"change\", t => {\n            setAttr(\"starRadiusMultiplier\", t.target.value);\n          }), i(\"radialShift\").addEventListener(\"change\", t => {\n            setAttr(\"radialshift\", t.target.value);\n          }), i(\"polySides\").addEventListener(\"change\", t => {\n            setAttr(\"sides\", t.target.value);\n            const e = t.target.value;\n            let o = l.length;\n\n            for (; o--;) {\n              const t = l[o];\n\n              if (t.hasAttribute(\"edge\")) {\n                const o = t.getAttribute(\"sides\"),\n                      i = t.getAttribute(\"points\");\n                let l = 0,\n                    s = 0;\n\n                if (t.points) {\n                  const a = t.points,\n                        r = a.numberOfItems;\n\n                  for (let t = 0; t < r; ++t) {\n                    const e = a.getItem(t);\n                    l += parseFloat(e.x), s += parseFloat(e.y);\n                  }\n\n                  const c = l / r,\n                        u = s / r,\n                        d = t.getAttribute(\"edge\") / 2 * cot(Math.PI / e) * sec(Math.PI / e);\n                  let g = \"\";\n\n                  for (let t = 0; e >= t; t++) {\n                    const o = 2 * Math.PI * t / e;\n                    g += d * Math.cos(o) + c + \",\" + (d * Math.sin(o) + u) + \" \";\n                  }\n\n                  t.setAttribute(\"points\", g), addToHistory(new n(t, {\n                    sides: o,\n                    points: i\n                  }));\n                }\n              }\n            }\n          });\n        },\n\n        mouseDown(t) {\n          if (\"star\" === o.getMode()) {\n            const e = o.getColor(\"fill\"),\n                  n = o.getColor(\"stroke\"),\n                  l = o.getStrokeWidth();\n            return s = !0, a = o.addSVGElementsFromJson({\n              element: \"polygon\",\n              attr: {\n                cx: t.start_x,\n                cy: t.start_y,\n                id: o.getNextId(),\n                shape: \"star\",\n                point: i(\"starNumPoints\").value,\n                r: 0,\n                radialshift: i(\"radialShift\").value,\n                r2: 0,\n                orient: \"point\",\n                fill: e,\n                strokecolor: n,\n                strokeWidth: l\n              }\n            }), {\n              started: !0\n            };\n          }\n\n          if (\"polygon\" === o.getMode()) {\n            const e = o.getColor(\"fill\"),\n                  n = o.getColor(\"stroke\"),\n                  l = o.getStrokeWidth();\n            return s = !0, a = o.addSVGElementsFromJson({\n              element: \"polygon\",\n              attr: {\n                cx: t.start_x,\n                cy: t.start_y,\n                id: o.getNextId(),\n                shape: \"regularPoly\",\n                sides: i(\"polySides\").value,\n                orient: \"x\",\n                edge: 0,\n                fill: e,\n                strokecolor: n,\n                strokeWidth: l\n              }\n            }), {\n              started: !0\n            };\n          }\n        },\n\n        mouseMove(t) {\n          if (s) {\n            if (\"star\" === o.getMode()) {\n              const e = Number(a.getAttribute(\"cx\")),\n                    o = Number(a.getAttribute(\"cy\")),\n                    n = Number(a.getAttribute(\"point\")),\n                    i = a.getAttribute(\"orient\"),\n                    l = a.getAttribute(\"fill\"),\n                    s = a.getAttribute(\"strokecolor\"),\n                    r = Number(a.getAttribute(\"strokeWidth\")),\n                    c = Number(a.getAttribute(\"radialshift\"));\n              let u = t.mouse_x,\n                  d = t.mouse_y;\n              const g = Math.sqrt((u - e) * (u - e) + (d - o) * (d - o)) / 1.5,\n                    p = document.getElementById(\"RadiusMultiplier\").value,\n                    b = g / p;\n              a.setAttribute(\"r\", g), a.setAttribute(\"r2\", b), a.setAttribute(\"starRadiusMultiplier\", p);\n              let h = \"\";\n\n              for (let t = 0; n >= t; t++) {\n                let l = 2 * Math.PI * (t / n);\n                \"point\" === i ? l -= Math.PI / 2 : \"edge\" === i && (l = l + Math.PI / n - Math.PI / 2), u = g * Math.cos(l) + e, d = g * Math.sin(l) + o, h += u + \",\" + d + \" \", isNaN(b) || (l = 2 * Math.PI * (t / n) + Math.PI / n, \"point\" === i ? l -= Math.PI / 2 : \"edge\" === i && (l = l + Math.PI / n - Math.PI / 2), l += c, u = b * Math.cos(l) + e, d = b * Math.sin(l) + o, h += u + \",\" + d + \" \");\n              }\n\n              return a.setAttribute(\"points\", h), a.setAttribute(\"fill\", l), a.setAttribute(\"stroke\", s), a.setAttribute(\"stroke-width\", r), a.getAttribute(\"shape\"), {\n                started: !0\n              };\n            }\n\n            if (\"polygon\" === o.getMode()) {\n              const e = Number(a.getAttribute(\"cx\")),\n                    o = Number(a.getAttribute(\"cy\")),\n                    n = Number(a.getAttribute(\"sides\")),\n                    i = a.getAttribute(\"fill\"),\n                    l = a.getAttribute(\"strokecolor\"),\n                    s = Number(a.getAttribute(\"strokeWidth\"));\n              let r = t.mouse_x,\n                  c = t.mouse_y;\n              const u = Math.sqrt((r - e) * (r - e) + (c - o) * (c - o)) / 1.5;\n              a.setAttribute(\"edge\", u);\n              const d = u / 2 * cot(Math.PI / n) * sec(Math.PI / n);\n              let g = \"\";\n\n              for (let t = 0; n >= t; t++) {\n                const i = 2 * Math.PI * t / n;\n                r = d * Math.cos(i) + e, c = d * Math.sin(i) + o, g += r + \",\" + c + \" \";\n              }\n\n              return a.setAttribute(\"points\", g), a.setAttribute(\"fill\", i), a.setAttribute(\"stroke\", l), a.setAttribute(\"stroke-width\", s), {\n                started: !0\n              };\n            }\n          }\n        },\n\n        mouseUp() {\n          if (\"star\" === o.getMode()) {\n            return {\n              keep: \"0\" !== a.getAttribute(\"r\"),\n              element: a\n            };\n          }\n\n          if (\"polygon\" === o.getMode()) {\n            return {\n              keep: \"0\" !== a.getAttribute(\"edge\"),\n              element: a\n            };\n          }\n        },\n\n        selectedChanged(t) {\n          l = t.elems;\n          let e = l.length;\n\n          for (; e--;) {\n            const o = l[e];\n            o && \"star\" === o.getAttribute(\"shape\") ? t.selectedElement && !t.multiselected ? (i(\"starNumPoints\").value = o.getAttribute(\"point\"), i(\"radialShift\").value = o.getAttribute(\"radialshift\"), showPanel(!0, \"star\")) : showPanel(!1, \"star\") : o && \"regularPoly\" === o.getAttribute(\"shape\") ? t.selectedElement && !t.multiselected ? (i(\"polySides\").value = o.getAttribute(\"sides\"), showPanel(!0, \"polygon\")) : showPanel(!1, \"polygon\") : (showPanel(!1, \"star\"), showPanel(!1, \"polygon\"));\n          }\n        }\n\n      };\n    })();\n  }\n\n},\n    o = Object.freeze({\n  __proto__: null,\n  default: {\n    name: \"star\",\n    title: \"Polygone/Star Tool\",\n    buttons: [{\n      title: \"Star Tool\"\n    }, {\n      title: \"Polygon Tool\"\n    }],\n    contextTools: [{\n      title: \"Number of Sides\",\n      label: \"points\"\n    }, {\n      title: \"Pointiness\",\n      label: \"Pointiness\"\n    }, {\n      title: \"Twists the star\",\n      label: \"Radial Shift\"\n    }, {\n      title: \"Number of Sides\",\n      label: \"sides\"\n    }]\n  }\n}),\n    n = Object.freeze({\n  __proto__: null,\n  default: {\n    name: \"etoile\",\n    title: \"Outil Polygone/Etoile\",\n    buttons: [{\n      title: \"Outil Etoile\"\n    }, {\n      title: \"Outil Polygone\"\n    }],\n    contextTools: [{\n      title: \"Nombre de côtés\",\n      label: \"points\"\n    }, {\n      title: \"Précision\",\n      label: \"Précision\"\n    }, {\n      title: \"Torsion Etoile\",\n      label: \"Décalage Radial\"\n    }, {\n      title: \"Nombre de côtés\",\n      label: \"côtés\"\n    }]\n  }\n}),\n    i = Object.freeze({\n  __proto__: null,\n  default: {\n    name: \"星形\",\n    title: \"Polygone/Star Tool\",\n    buttons: [{\n      title: \"星形工具\"\n    }, {\n      title: \"多边形工具\"\n    }],\n    contextTools: [{\n      title: \"顶点\",\n      label: \"顶点\"\n    }, {\n      title: \"钝度\",\n      label: \"钝度\"\n    }, {\n      title: \"径向\",\n      label: \"径向\"\n    }, {\n      title: \"边数\",\n      label: \"边数\"\n    }]\n  }\n});\n //# sourceMappingURL=ext-polystar.js.map\n\n/***/ })\n\n}]);","inputSourceMap":null}