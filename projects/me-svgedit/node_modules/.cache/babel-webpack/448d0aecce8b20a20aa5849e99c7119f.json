{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/lib-workspace/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @file ext-helloworld.js\n *\n * @license MIT\n *\n * @copyright 2010 Alexis Deveria\n *\n */\nconst e = \"helloworld\",\n      loadExtensionTranslation = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (t) {\n    let r;\n    const c = t.configObj.pref(\"lang\");\n\n    try {\n      r = yield function __variableDynamicImportRuntime0__(e) {\n        switch (e) {\n          case \"./locale/en.js\":\n            return Promise.resolve().then(function () {\n              return o;\n            });\n\n          case \"./locale/fr.js\":\n            return Promise.resolve().then(function () {\n              return n;\n            });\n\n          case \"./locale/zh-CN.js\":\n            return Promise.resolve().then(function () {\n              return l;\n            });\n\n          default:\n            return new Promise(function (t, o) {\n              (\"function\" == typeof queueMicrotask ? queueMicrotask : setTimeout)(o.bind(null, new Error(\"Unknown variable dynamic import: \" + e)));\n            });\n        }\n      }(\"./locale/\".concat(c, \".js\"));\n    } catch (t) {\n      console.warn(\"Missing translation (\".concat(c, \") for \").concat(e, \" - using 'en'\")), r = yield Promise.resolve().then(function () {\n        return o;\n      });\n    }\n\n    t.i18next.addResourceBundle(c, e, r.default);\n  });\n\n  return function loadExtensionTranslation(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar t = {\n  name: e,\n\n  init(t) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const o = _this;\n      yield loadExtensionTranslation(o);\n      const {\n        svgCanvas: n\n      } = o,\n            {\n        $id: l\n      } = n;\n      return {\n        name: o.i18next.t(\"\".concat(e, \":name\")),\n\n        callback() {\n          const t = document.createElement(\"template\"),\n                o = \"\".concat(e, \":buttons.0.title\");\n          t.innerHTML = '\\n        <se-button id=\"hello_world\" title=\"'.concat(o, '\" src=\"hello_world.svg\"></se-button>\\n        '), l(\"tools_left\").append(t.content.cloneNode(!0)), l(\"hello_world\").addEventListener(\"click\", () => {\n            n.setMode(\"hello_world\");\n          });\n        },\n\n        mouseDown() {\n          if (\"hello_world\" === n.getMode()) return {\n            started: !0\n          };\n        },\n\n        mouseUp(t) {\n          if (\"hello_world\" === n.getMode()) {\n            const l = n.getZoom(),\n                  r = t.mouse_x / l,\n                  c = t.mouse_y / l,\n                  a = o.i18next.t(\"\".concat(e, \":text\"), {\n              x: r,\n              y: c\n            });\n            alert(a);\n          }\n        }\n\n      };\n    })();\n  }\n\n},\n    o = Object.freeze({\n  __proto__: null,\n  default: {\n    name: \"Hello World\",\n    text: \"Hello World!\\n\\nYou clicked here: {{x}}, {{y}}\",\n    buttons: [{\n      title: \"Say 'Hello World'\"\n    }]\n  }\n}),\n    n = Object.freeze({\n  __proto__: null,\n  default: {\n    name: \"Bonjour le Monde\",\n    text: \"Bonjour le Monde!\\n\\nVous avez cliqué ici: {{x}}, {{y}}\",\n    buttons: [{\n      title: \"Dire 'Bonjour le Monde'\"\n    }]\n  }\n}),\n    l = Object.freeze({\n  __proto__: null,\n  default: {\n    name: \"Hello World\",\n    text: \"Hello World!\\n\\n 请点击: {{x}}, {{y}}\",\n    buttons: [{\n      title: \"输出 'Hello World'\"\n    }]\n  }\n});\nexport { t as default }; //# sourceMappingURL=ext-helloworld.js.map","map":null,"metadata":{},"sourceType":"module"}