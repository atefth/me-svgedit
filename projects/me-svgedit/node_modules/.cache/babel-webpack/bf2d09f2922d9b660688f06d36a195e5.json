{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/lib-workspace/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar e = Object.defineProperty,\n    u = (e, t) => () => (e && (t = e(e = 0)), t),\n    m = (t, i) => {\n  for (var s in (t => {\n    e(t, \"__esModule\", {\n      value: !0\n    });\n  })(t), i) e(t, s, {\n    get: i[s],\n    enumerable: !0\n  });\n},\n    t = {};\n\nm(t, {\n  default: () => i\n});\nvar i,\n    s = u(() => {\n  i = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [{}];\n      return Array.isArray(e) || (e = [e]), new Promise((t, i) => {\n        let s = document.createElement(\"input\");\n        s.type = \"file\";\n        let o = [...e.map(e => e.mimeTypes || []).join(), e.map(e => e.extensions || []).join()].join();\n        s.multiple = e[0].multiple || !1, s.accept = o || \"\";\n\n        let a = e => {\n          \"function\" == typeof r && r(), t(e);\n        },\n            r = e[0].legacySetup && e[0].legacySetup(a, () => r(i), s);\n\n        s.addEventListener(\"change\", () => {\n          a(s.multiple ? Array.from(s.files) : s.files[0]);\n        }), s.click();\n      });\n    });\n\n    return function i() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}),\n    o = {};\nm(o, {\n  default: () => c\n});\nvar r,\n    c,\n    d = u(() => {\n  r = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (e) {\n      let t = yield e.getFile();\n      return t.handle = e, t;\n    });\n\n    return function r(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), c = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [{}];\n      Array.isArray(e) || (e = [e]);\n      let t = [];\n      e.forEach((e, i) => {\n        t[i] = {\n          description: e.description || \"\",\n          accept: {}\n        }, e.mimeTypes ? e.mimeTypes.map(s => {\n          t[i].accept[s] = e.extensions || [];\n        }) : t[i].accept[\"*/*\"] = e.extensions || [];\n      });\n      let i = yield window.showOpenFilePicker({\n        id: e[0].id,\n        startIn: e[0].startIn,\n        types: t,\n        multiple: e[0].multiple || !1,\n        excludeAcceptAllOption: e[0].excludeAcceptAllOption || !1\n      }),\n          s = yield Promise.all(i.map(r));\n      return e[0].multiple ? s : s[0];\n    });\n\n    return function c() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n}),\n    p = {};\nm(p, {\n  default: () => v\n});\nvar v,\n    g = u(() => {\n  v = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [{}];\n      return Array.isArray(e) || (e = [e]), e[0].recursive = e[0].recursive || !1, new Promise((t, i) => {\n        let s = document.createElement(\"input\");\n        s.type = \"file\", s.webkitdirectory = !0;\n\n        let l = e => {\n          \"function\" == typeof o && o(), t(e);\n        },\n            o = e[0].legacySetup && e[0].legacySetup(l, () => o(i), s);\n\n        s.addEventListener(\"change\", () => {\n          let t = Array.from(s.files);\n          e[0].recursive ? e[0].recursive && e[0].skipDirectory && (t = t.filter(t => t.webkitRelativePath.split(\"/\").every(t => !e[0].skipDirectory({\n            name: t,\n            kind: \"directory\"\n          })))) : t = t.filter(e => 2 === e.webkitRelativePath.split(\"/\").length), l(t);\n        }), s.click();\n      });\n    });\n\n    return function v() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n}),\n    f = {};\nm(f, {\n  default: () => y\n});\nvar h,\n    y,\n    w = u(() => {\n  h = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator(function* (e, t) {\n      let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e.name,\n          s = arguments.length > 3 ? arguments[3] : void 0,\n          o = [],\n          r = [];\n\n      for await (let c of e.values()) {\n        let d = \"\".concat(i, \"/\").concat(c.name);\n        \"file\" === c.kind ? r.push(c.getFile().then(t => (t.directoryHandle = e, Object.defineProperty(t, \"webkitRelativePath\", {\n          configurable: !0,\n          enumerable: !0,\n          get: () => d\n        })))) : \"directory\" === c.kind && t && (!s || !s(c)) && o.push(h(c, t, d, s));\n      }\n\n      return [...(yield Promise.all(o)).flat(), ...(yield Promise.all(r))];\n    });\n\n    return function h(_x2, _x3) {\n      return _ref5.apply(this, arguments);\n    };\n  }(), y = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator(function* () {\n      let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      e.recursive = e.recursive || !1;\n      let t = yield window.showDirectoryPicker({\n        id: e.id,\n        startIn: e.startIn\n      });\n      return h(t, e.recursive, void 0, e.skipDirectory);\n    });\n\n    return function y() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n}),\n    _ = {};\n\nfunction q(_x4, _x5) {\n  return _q.apply(this, arguments);\n}\n\nfunction _q() {\n  _q = _asyncToGenerator(function* (e, t) {\n    let i = e.getReader(),\n        s = new ReadableStream({\n      start: e => function () {\n        var _a = _asyncToGenerator(function* () {\n          return i.read().then(t => {\n            let {\n              done: i,\n              value: s\n            } = t;\n            if (!i) return e.enqueue(s), a();\n            e.close();\n          });\n        });\n\n        function a() {\n          return _a.apply(this, arguments);\n        }\n\n        return a;\n      }()()\n    }),\n        o = new Response(s);\n    return i.releaseLock(), new Blob([yield o.blob()], {\n      type: t\n    });\n  });\n  return _q.apply(this, arguments);\n}\n\nm(_, {\n  default: () => b\n});\nvar b,\n    A = u(() => {\n  b = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator(function* (e) {\n      let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      Array.isArray(t) && (t = t[0]);\n      let i = document.createElement(\"a\"),\n          s = e;\n      \"body\" in e && (s = yield q(e.body, e.headers.get(\"content-type\"))), i.download = t.fileName || \"Untitled\", i.href = URL.createObjectURL(s);\n\n      let n = () => o(reject),\n          l = () => {\n        \"function\" == typeof o && o();\n      },\n          o = t.legacySetup && t.legacySetup(l, n, i);\n\n      return i.addEventListener(\"click\", () => {\n        setTimeout(() => URL.revokeObjectURL(i.href), 3e4), l();\n      }), i.click(), null;\n    });\n\n    return function b(_x6) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n}),\n    P = {};\nm(P, {\n  default: () => k\n});\n\nvar k,\n    S = u(() => {\n  k = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator(function* (e) {\n      let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [{}],\n          i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n          s = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n      Array.isArray(t) || (t = [t]), t[0].fileName = t[0].fileName || \"Untitled\";\n      let o = [];\n      if (t.forEach((t, i) => {\n        o[i] = {\n          description: t.description || \"\",\n          accept: {}\n        }, t.mimeTypes ? (0 === i && (e.type ? t.mimeTypes.push(e.type) : e.headers && e.headers.get(\"content-type\") && t.mimeTypes.push(e.headers.get(\"content-type\"))), t.mimeTypes.map(e => {\n          o[i].accept[e] = t.extensions || [];\n        })) : e.type && (o[i].accept[e.type] = t.extensions || []);\n      }), i) try {\n        yield i.getFile();\n      } catch (e) {\n        if (i = null, s) throw e;\n      }\n      let r = i || (yield window.showSaveFilePicker({\n        suggestedName: t[0].fileName,\n        id: t[0].id,\n        startIn: t[0].startIn,\n        types: o,\n        excludeAcceptAllOption: t[0].excludeAcceptAllOption || !1\n      })),\n          c = yield r.createWritable();\n      return \"stream\" in e ? (yield e.stream().pipeTo(c), r) : \"body\" in e ? (yield e.body.pipeTo(c), r) : (yield c.write(blob), yield c.close(), r);\n    });\n\n    return function k(_x7) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n}),\n    C = (() => {\n  if (\"undefined\" == typeof self) return !1;\n  if (\"top\" in self && self !== top) try {\n    top.location;\n  } catch {\n    return !1;\n  } else if (\"showOpenFilePicker\" in self) return \"showOpenFilePicker\";\n  return !1;\n})(),\n    x = C ? Promise.resolve().then(() => (d(), o)) : Promise.resolve().then(() => (s(), t));\n\nC ? Promise.resolve().then(() => (w(), f)) : Promise.resolve().then(() => (g(), p));\nvar E = C ? Promise.resolve().then(() => (S(), P)) : Promise.resolve().then(() => (A(), _));\n\nfunction G() {\n  return _G.apply(this, arguments);\n} // @license Â© 2020 Google LLC. Licensed under the Apache License, Version 2.0.\n\n\nfunction _G() {\n  _G = _asyncToGenerator(function* () {\n    return (yield E).default(...arguments);\n  });\n  return _G.apply(this, arguments);\n}\n\nconst O = \"opensave\";\nlet I = null;\n\nconst loadExtensionTranslation = /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator(function* (e) {\n    let t;\n    const i = e.configObj.pref(\"lang\");\n\n    try {\n      t = yield function __variableDynamicImportRuntime0__(e) {\n        switch (e) {\n          case \"./locale/en.js\":\n            return Promise.resolve().then(function () {\n              return L;\n            });\n\n          case \"./locale/fr.js\":\n            return Promise.resolve().then(function () {\n              return T;\n            });\n\n          case \"./locale/zh-CN.js\":\n            return Promise.resolve().then(function () {\n              return R;\n            });\n\n          default:\n            return new Promise(function (t, i) {\n              (\"function\" == typeof queueMicrotask ? queueMicrotask : setTimeout)(i.bind(null, new Error(\"Unknown variable dynamic import: \" + e)));\n            });\n        }\n      }(\"./locale/\".concat(i, \".js\"));\n    } catch (e) {\n      console.warn(\"Missing translation (\".concat(i, \") for \").concat(O, \" - using 'en'\")), t = yield Promise.resolve().then(function () {\n        return L;\n      });\n    }\n\n    e.i18next.addResourceBundle(i, \"translation\", t.default, !0, !0);\n  });\n\n  return function loadExtensionTranslation(_x8) {\n    return _ref9.apply(this, arguments);\n  };\n}();\n\nvar j = {\n  name: O,\n\n  init(e) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const t = _this,\n            {\n        svgCanvas: i\n      } = t,\n            {\n        $id: s\n      } = i;\n      yield loadExtensionTranslation(t);\n\n      const importImage = e => {\n        s(\"se-prompt-dialog\").title = _this.i18next.t(\"notification.loadingImage\"), s(\"se-prompt-dialog\").setAttribute(\"close\", !1), e.stopPropagation(), e.preventDefault();\n        const t = \"drop\" === e.type ? e.dataTransfer.files[0] : e.currentTarget.files[0];\n        if (!t) return void s(\"se-prompt-dialog\").setAttribute(\"close\", !0);\n        if (!t.type.includes(\"image\")) return;\n        let i;\n        t.type.includes(\"svg\") ? (i = new FileReader(), i.onloadend = e => {\n          const t = _this.svgCanvas.importSvgString(e.target.result, !0);\n\n          _this.svgCanvas.alignSelectedElements(\"m\", \"page\"), _this.svgCanvas.alignSelectedElements(\"c\", \"page\"), _this.svgCanvas.selectOnly([t]), s(\"se-prompt-dialog\").setAttribute(\"close\", !0);\n        }, i.readAsText(t)) : (i = new FileReader(), i.onloadend = function (e) {\n          let {\n            target: {\n              result: t\n            }\n          } = e;\n\n          const insertNewImage = (e, i) => {\n            const o = this.svgCanvas.addSVGElementsFromJson({\n              element: \"image\",\n              attr: {\n                x: 0,\n                y: 0,\n                width: e,\n                height: i,\n                id: this.svgCanvas.getNextId(),\n                style: \"pointer-events:inherit\"\n              }\n            });\n            this.svgCanvas.setHref(o, t), this.svgCanvas.selectOnly([o]), this.svgCanvas.alignSelectedElements(\"m\", \"page\"), this.svgCanvas.alignSelectedElements(\"c\", \"page\"), this.topPanel.updateContextPanel(), s(\"se-prompt-dialog\").setAttribute(\"close\", !0);\n          };\n\n          let i = 100,\n              o = 100;\n          const r = new Image();\n          r.style.opacity = 0, r.addEventListener(\"load\", () => {\n            i = r.offsetWidth || r.naturalWidth || r.width, o = r.offsetHeight || r.naturalHeight || r.height, insertNewImage(i, o);\n          }), r.src = t;\n        }, i.readAsDataURL(t));\n      },\n            o = document.createElement(\"input\");\n\n      o.type = \"file\", o.addEventListener(\"change\", importImage), _this.workarea.addEventListener(\"drop\", importImage);\n\n      const clickClear = /*#__PURE__*/function () {\n        var _ref10 = _asyncToGenerator(function* () {\n          const [e, i] = t.configObj.curConfig.dimensions;\n          \"Cancel\" !== (yield seConfirm(t.i18next.t(\"notification.QwantToClear\"))) && (t.leftPanel.clickSelect(), t.svgCanvas.clear(), t.svgCanvas.setResolution(e, i), t.updateCanvas(!0), t.zoomImage(), t.layersPanel.populateLayers(), t.topPanel.updateContextPanel(), t.svgCanvas.runExtensions(\"onNewDocument\"));\n        });\n\n        return function clickClear() {\n          return _ref10.apply(this, arguments);\n        };\n      }(),\n            clickOpen = /*#__PURE__*/function () {\n        var _ref11 = _asyncToGenerator(function* () {\n          if (\"Cancel\" !== (yield t.openPrep())) {\n            i.clear();\n\n            try {\n              const e = yield function () {\n                var _M = _asyncToGenerator(function* () {\n                  return (yield x).default(...arguments);\n                });\n\n                function M() {\n                  return _M.apply(this, arguments);\n                }\n\n                return M;\n              }()({\n                mimeTypes: [\"image/*\"]\n              }),\n                    i = yield e.text();\n              yield t.loadSvgString(i), t.updateCanvas();\n            } catch (e) {\n              if (\"AbortError\" !== e.name) return console.error(e);\n            }\n          }\n        });\n\n        return function clickOpen() {\n          return _ref11.apply(this, arguments);\n        };\n      }(),\n            clickSave = /*#__PURE__*/function () {\n        var _ref12 = _asyncToGenerator(function* (e, o) {\n          if (\"open\" === s(\"se-svg-editor-dialog\").getAttribute(\"dialog\")) t.saveSourceEditor();else {\n            const s = {\n              images: t.configObj.pref(\"img_save\"),\n              round_digits: 6\n            };\n\n            if (i.clearSelection(), s) {\n              const e = i.mergeDeep(i.getSvgOption(), s);\n\n              for (const [t, s] of Object.entries(e)) i.setSvgOption(t, s);\n            }\n\n            i.setSvgOption(\"apply\", !0);\n\n            const o = '<?xml version=\"1.0\"?>\\n' + i.svgCanvasToString(),\n                  r = function (e) {\n              let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"\",\n                  i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 512;\n              const s = atob(e),\n                    o = [];\n\n              for (let e = 0; e < s.length; e += i) {\n                const t = s.slice(e, e + i),\n                      r = new Array(t.length);\n\n                for (let e = 0; e < t.length; e++) r[e] = t.charCodeAt(e);\n\n                const c = new Uint8Array(r);\n                o.push(c);\n              }\n\n              return new Blob(o, {\n                type: t\n              });\n            }(i.encode64(o), \"image/svg+xml\");\n\n            try {\n              if (\"save\" === e && null !== I) {\n                const e = !1;\n                I = yield G(r, {\n                  fileName: \"icon.svg\",\n                  extensions: [\".svg\"]\n                }, I, e);\n              } else I = yield G(r, {\n                fileName: \"icon.svg\",\n                extensions: [\".svg\"]\n              });\n            } catch (e) {\n              if (\"AbortError\" !== e.name) return console.error(e);\n            }\n          }\n        });\n\n        return function clickSave(_x9, _x10) {\n          return _ref12.apply(this, arguments);\n        };\n      }();\n\n      return {\n        name: t.i18next.t(\"\".concat(O, \":name\")),\n\n        callback() {\n          i.insertChildAtIndex(s(\"main_button\"), '\\n        <se-menu-item id=\"tool_clear\" label=\"opensave.new_doc\" shortcut=\"N\" src=\"new.svg\"></se-menu-item>', 0);\n          i.insertChildAtIndex(s(\"main_button\"), '<se-menu-item id=\"tool_open\" label=\"opensave.open_image_doc\" src=\"open.svg\"></se-menu-item>', 1);\n          i.insertChildAtIndex(s(\"main_button\"), '<se-menu-item id=\"tool_save\" label=\"opensave.save_doc\" shortcut=\"S\" src=\"saveImg.svg\"></se-menu-item>', 2);\n          i.insertChildAtIndex(s(\"main_button\"), '<se-menu-item id=\"tool_save_as\" label=\"opensave.save_as_doc\" src=\"saveImg.svg\"></se-menu-item>', 3);\n          i.insertChildAtIndex(s(\"main_button\"), '<se-menu-item id=\"tool_import\" label=\"tools.import_doc\" src=\"importImg.svg\"></se-menu-item>', 4), s(\"tool_clear\").addEventListener(\"click\", clickClear.bind(this)), s(\"tool_open\").addEventListener(\"click\", clickOpen.bind(this)), s(\"tool_save\").addEventListener(\"click\", clickSave.bind(this, \"save\")), s(\"tool_save_as\").addEventListener(\"click\", clickSave.bind(this, \"saveas\")), s(\"tool_import\").addEventListener(\"click\", () => o.click());\n        }\n\n      };\n    })();\n  }\n\n},\n    L = Object.freeze({\n  __proto__: null,\n  default: {\n    opensave: {\n      new_doc: \"New Image\",\n      open_image_doc: \"Open SVG\",\n      save_doc: \"Save SVG\",\n      save_as_doc: \"Save as SVG\"\n    }\n  }\n}),\n    T = Object.freeze({\n  __proto__: null,\n  default: {\n    opensave: {\n      new_doc: \"Nouvelle image\",\n      open_image_doc: \"Ouvrir le SVG\",\n      save_doc: \"Enregistrer l'image\",\n      save_as_doc: \"Enregistrer en tant qu'image\"\n    }\n  }\n}),\n    R = Object.freeze({\n  __proto__: null,\n  default: {\n    opensave: {\n      new_doc: \"æ°å¾ç\",\n      open_image_doc: \"æå¼ SVG\",\n      save_doc: \"ä¿å­å¾å\",\n      save_as_doc: \"å¦å­ä¸ºå¾å\"\n    }\n  }\n});\nexport { j as default }; //# sourceMappingURL=ext-opensave.js.map","map":null,"metadata":{},"sourceType":"module"}