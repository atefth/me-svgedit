{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/lib-workspace/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @file ext-eyedropper.js\n *\n * @license MIT\n *\n * @copyright 2010 Jeff Schiller\n * @copyright 2021 OptimistikSAS\n *\n */\nconst e = \"eyedropper\",\n      loadExtensionTranslation = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (t) {\n    let i;\n    const a = t.configObj.pref(\"lang\");\n\n    try {\n      i = yield function __variableDynamicImportRuntime0__(e) {\n        switch (e) {\n          case \"./locale/en.js\":\n            return Promise.resolve().then(function () {\n              return o;\n            });\n\n          case \"./locale/fr.js\":\n            return Promise.resolve().then(function () {\n              return r;\n            });\n\n          case \"./locale/zh-CN.js\":\n            return Promise.resolve().then(function () {\n              return n;\n            });\n\n          default:\n            return new Promise(function (t, o) {\n              (\"function\" == typeof queueMicrotask ? queueMicrotask : setTimeout)(o.bind(null, new Error(\"Unknown variable dynamic import: \" + e)));\n            });\n        }\n      }(\"./locale/\".concat(a, \".js\"));\n    } catch (t) {\n      console.warn(\"Missing translation (\".concat(a, \") for \").concat(e, \" - using 'en'\")), i = yield Promise.resolve().then(function () {\n        return o;\n      });\n    }\n\n    t.i18next.addResourceBundle(a, e, i.default);\n  });\n\n  return function loadExtensionTranslation(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar t = {\n  name: e,\n\n  init() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const t = _this,\n            {\n        svgCanvas: o\n      } = t;\n      yield loadExtensionTranslation(t);\n\n      const {\n        ChangeElementCommand: r\n      } = o.history,\n            n = {\n        fillPaint: \"red\",\n        fillOpacity: 1,\n        strokePaint: \"black\",\n        strokeOpacity: 1,\n        strokeWidth: 5,\n        strokeDashArray: null,\n        opacity: 1,\n        strokeLinecap: \"butt\",\n        strokeLinejoin: \"miter\"\n      },\n            {\n        $id: i\n      } = o,\n            getStyle = e => {\n        if (\"eyedropper\" === o.getMode()) return;\n        const t = i(\"tool_eyedropper\");\n        let r = null;\n        e.multiselected || !e.elems[0] || [\"svg\", \"g\", \"use\"].includes(e.elems[0].nodeName) ? t.classList.add(\"disabled\") : (r = e.elems[0], t.classList.remove(\"disabled\"), n.fillPaint = r.getAttribute(\"fill\") || \"black\", n.fillOpacity = r.getAttribute(\"fill-opacity\") || 1, n.strokePaint = r.getAttribute(\"stroke\"), n.strokeOpacity = r.getAttribute(\"stroke-opacity\") || 1, n.strokeWidth = r.getAttribute(\"stroke-width\"), n.strokeDashArray = r.getAttribute(\"stroke-dasharray\"), n.strokeLinecap = r.getAttribute(\"stroke-linecap\"), n.strokeLinejoin = r.getAttribute(\"stroke-linejoin\"), n.opacity = r.getAttribute(\"opacity\") || 1);\n      };\n\n      return {\n        name: t.i18next.t(\"\".concat(e, \":name\")),\n\n        callback() {\n          const t = \"\".concat(e, \":buttons.0.title\"),\n                r = \"\".concat(e, \":buttons.0.key\"),\n                n = '\\n        <se-button id=\"tool_eyedropper\" title=\"'.concat(t, '\" src=\"eye_dropper.svg\" shortcut=').concat(r, \"></se-button>\\n        \");\n          o.insertChildAtIndex(i(\"tools_left\"), n, 12), i(\"tool_eyedropper\").addEventListener(\"click\", () => {\n            this.leftPanel.updateLeftPanel(\"tool_eyedropper\") && o.setMode(\"eyedropper\");\n          });\n        },\n\n        selectedChanged: getStyle,\n        elementChanged: getStyle,\n\n        mouseDown(e) {\n          if (\"eyedropper\" === o.getMode()) {\n            const i = e.event,\n                  {\n              target: a\n            } = i;\n\n            if (![\"svg\", \"g\", \"use\"].includes(a.nodeName)) {\n              const e = {},\n                    change = function (t, o, r) {\n                e[o] = t.getAttribute(o), t.setAttribute(o, r);\n              };\n\n              n.fillPaint && change(a, \"fill\", n.fillPaint), n.fillOpacity && change(a, \"fill-opacity\", n.fillOpacity), n.strokePaint && change(a, \"stroke\", n.strokePaint), n.strokeOpacity && change(a, \"stroke-opacity\", n.strokeOpacity), n.strokeWidth && change(a, \"stroke-width\", n.strokeWidth), n.strokeDashArray && change(a, \"stroke-dasharray\", n.strokeDashArray), n.opacity && change(a, \"opacity\", n.opacity), n.strokeLinecap && change(a, \"stroke-linecap\", n.strokeLinecap), n.strokeLinejoin && change(a, \"stroke-linejoin\", n.strokeLinejoin), t = new r(a, e), o.undoMgr.addCommandToHistory(t);\n            }\n          }\n\n          var t;\n        }\n\n      };\n    })();\n  }\n\n},\n    o = Object.freeze({\n  __proto__: null,\n  default: {\n    name: \"eyedropper\",\n    buttons: [{\n      title: \"Eye Dropper Tool\",\n      key: \"I\"\n    }]\n  }\n}),\n    r = Object.freeze({\n  __proto__: null,\n  default: {\n    name: \"pipette\",\n    buttons: [{\n      title: \"Outil pipette\",\n      key: \"I\"\n    }]\n  }\n}),\n    n = Object.freeze({\n  __proto__: null,\n  default: {\n    name: \"滴管\",\n    buttons: [{\n      title: \"滴管工具\",\n      key: \"I\"\n    }]\n  }\n});\nexport { t as default }; //# sourceMappingURL=ext-eyedropper.js.map","map":null,"metadata":{},"sourceType":"module"}