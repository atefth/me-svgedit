{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/lib-workspace/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @file ext-polystar.js\n *\n *\n * @copyright 2010 CloudCanvas, Inc. All rights reserved\n * @copyright 2021 Optimistik SAS, Inc. All rights reserved\n * @license MIT\n *\n */\nconst t = \"polystar\",\n      loadExtensionTranslation = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (e) {\n    let l;\n    const s = e.configObj.pref(\"lang\");\n\n    try {\n      l = yield function __variableDynamicImportRuntime0__(t) {\n        switch (t) {\n          case \"./locale/en.js\":\n            return Promise.resolve().then(function () {\n              return o;\n            });\n\n          case \"./locale/fr.js\":\n            return Promise.resolve().then(function () {\n              return n;\n            });\n\n          case \"./locale/zh-CN.js\":\n            return Promise.resolve().then(function () {\n              return i;\n            });\n\n          default:\n            return new Promise(function (e, o) {\n              (\"function\" == typeof queueMicrotask ? queueMicrotask : setTimeout)(o.bind(null, new Error(\"Unknown variable dynamic import: \" + t)));\n            });\n        }\n      }(\"./locale/\".concat(s, \".js\"));\n    } catch (e) {\n      console.warn(\"Missing translation (\".concat(s, \") for \").concat(t, \" - using 'en'\")), l = yield Promise.resolve().then(function () {\n        return o;\n      });\n    }\n\n    e.i18next.addResourceBundle(s, t, l.default);\n  });\n\n  return function loadExtensionTranslation(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar e = {\n  name: t,\n\n  init() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const e = _this,\n            {\n        svgCanvas: o\n      } = e,\n            {\n        ChangeElementCommand: n\n      } = o.history,\n            addToHistory = t => {\n        o.undoMgr.addCommandToHistory(t);\n      },\n            {\n        $id: i\n      } = o;\n\n      let l, s, a;\n      yield loadExtensionTranslation(e);\n\n      const showPanel = (t, e) => {\n        t ? i(\"\".concat(e, \"_panel\")).style.removeProperty(\"display\") : i(\"\".concat(e, \"_panel\")).style.display = \"none\";\n      },\n            setAttr = (t, e) => {\n        o.changeSelectedAttribute(t, e), o.call(\"changed\", l);\n      },\n            cot = t => 1 / Math.tan(t),\n            sec = t => 1 / Math.cos(t);\n\n      return {\n        name: e.i18next.t(\"\".concat(t, \":name\")),\n\n        callback() {\n          const e = \"\".concat(t, \":title\"),\n                s = \"\".concat(t, \":buttons.0.title\"),\n                a = \"\".concat(t, \":buttons.1.title\"),\n                r = '\\n            <se-flyingbutton id=\"tools_polygon\" title=\"'.concat(e, '\">\\n              <se-button id=\"tool_star\" title=\"').concat(s, '\" src=\"star.svg\">\\n              </se-button>\\n              <se-button id=\"tool_polygon\" title=\"').concat(a, '\" src=\"polygon.svg\">\\n              </se-button>\\n            </se-flyingbutton>\\n          ');\n          o.insertChildAtIndex(i(\"tools_left\"), r, 10), i(\"tool_star\").addEventListener(\"click\", () => {\n            this.leftPanel.updateLeftPanel(\"tool_star\") && (o.setMode(\"star\"), showPanel(!0, \"star\"), showPanel(!1, \"polygon\"));\n          }), i(\"tool_polygon\").addEventListener(\"click\", () => {\n            this.leftPanel.updateLeftPanel(\"tool_polygon\") && (o.setMode(\"polygon\"), showPanel(!0, \"polygon\"), showPanel(!1, \"star\"));\n          });\n          const c = \"\".concat(t, \":contextTools.0.label\"),\n                u = \"\".concat(t, \":contextTools.0.title\"),\n                d = \"\".concat(t, \":contextTools.1.label\"),\n                g = \"\".concat(t, \":contextTools.1.title\"),\n                p = \"\".concat(t, \":contextTools.2.label\"),\n                b = \"\".concat(t, \":contextTools.2.title\"),\n                h = \"\".concat(t, \":contextTools.3.label\"),\n                m = \"\".concat(t, \":contextTools.3.title\"),\n                f = document.createElement(\"template\");\n          f.innerHTML = '\\n          <div id=\"star_panel\">\\n            <se-spin-input id=\"starNumPoints\" label=\"'.concat(c, '\" min=1 step=1 value=5 title=\"').concat(u, '\">\\n            </se-spin-input>\\n            <se-spin-input id=\"RadiusMultiplier\" label=\"').concat(d, '\" min=1 step=2.5 value=3 title=\"').concat(g, '\">\\n            </se-spin-input>\\n            <se-spin-input id=\"radialShift\" min=0 step=1 value=0 label=\"').concat(p, '\" title=\"').concat(b, '\">\\n            </se-spin-input>\\n          </div>\\n          <div id=\"polygon_panel\">\\n            <se-spin-input size=\"3\" id=\"polySides\" min=1 step=1 value=5 label=\"').concat(h, '\" title=\"').concat(m, '\">\\n            </se-spin-input>\\n          </div>\\n        '), i(\"tools_top\").appendChild(f.content.cloneNode(!0)), showPanel(!1, \"star\"), showPanel(!1, \"polygon\"), i(\"starNumPoints\").addEventListener(\"change\", t => {\n            setAttr(\"point\", t.target.value);\n            const e = t.target.value;\n            let o = l.length;\n\n            for (; o--;) {\n              const t = l[o];\n\n              if (t.hasAttribute(\"r\")) {\n                const o = t.getAttribute(\"point\"),\n                      i = t.getAttribute(\"points\"),\n                      l = t.getAttribute(\"radialshift\");\n                let s = 0,\n                    a = 0;\n\n                if (t.points) {\n                  const r = t.points,\n                        c = r.numberOfItems;\n\n                  for (let t = 0; t < c; ++t) {\n                    const e = r.getItem(t);\n                    s += parseFloat(e.x), a += parseFloat(e.y);\n                  }\n\n                  const u = s / c,\n                        d = a / c,\n                        g = Number(t.getAttribute(\"r\")),\n                        p = g / t.getAttribute(\"starRadiusMultiplier\");\n                  let b = \"\";\n\n                  for (let t = 0; e >= t; t++) {\n                    let o = 2 * Math.PI * (t / e);\n                    o -= Math.PI / 2;\n                    let n = g * Math.cos(o) + u,\n                        i = g * Math.sin(o) + d;\n                    b += n + \",\" + i + \" \", isNaN(p) || (o = 2 * Math.PI * (t / e) + Math.PI / e, o -= Math.PI / 2, o += l, n = p * Math.cos(o) + u, i = p * Math.sin(o) + d, b += n + \",\" + i + \" \");\n                  }\n\n                  t.setAttribute(\"points\", b), addToHistory(new n(t, {\n                    point: o,\n                    points: i\n                  }));\n                }\n              }\n            }\n          }), i(\"RadiusMultiplier\").addEventListener(\"change\", t => {\n            setAttr(\"starRadiusMultiplier\", t.target.value);\n          }), i(\"radialShift\").addEventListener(\"change\", t => {\n            setAttr(\"radialshift\", t.target.value);\n          }), i(\"polySides\").addEventListener(\"change\", t => {\n            setAttr(\"sides\", t.target.value);\n            const e = t.target.value;\n            let o = l.length;\n\n            for (; o--;) {\n              const t = l[o];\n\n              if (t.hasAttribute(\"edge\")) {\n                const o = t.getAttribute(\"sides\"),\n                      i = t.getAttribute(\"points\");\n                let l = 0,\n                    s = 0;\n\n                if (t.points) {\n                  const a = t.points,\n                        r = a.numberOfItems;\n\n                  for (let t = 0; t < r; ++t) {\n                    const e = a.getItem(t);\n                    l += parseFloat(e.x), s += parseFloat(e.y);\n                  }\n\n                  const c = l / r,\n                        u = s / r,\n                        d = t.getAttribute(\"edge\") / 2 * cot(Math.PI / e) * sec(Math.PI / e);\n                  let g = \"\";\n\n                  for (let t = 0; e >= t; t++) {\n                    const o = 2 * Math.PI * t / e;\n                    g += d * Math.cos(o) + c + \",\" + (d * Math.sin(o) + u) + \" \";\n                  }\n\n                  t.setAttribute(\"points\", g), addToHistory(new n(t, {\n                    sides: o,\n                    points: i\n                  }));\n                }\n              }\n            }\n          });\n        },\n\n        mouseDown(t) {\n          if (\"star\" === o.getMode()) {\n            const e = o.getColor(\"fill\"),\n                  n = o.getColor(\"stroke\"),\n                  l = o.getStrokeWidth();\n            return s = !0, a = o.addSVGElementsFromJson({\n              element: \"polygon\",\n              attr: {\n                cx: t.start_x,\n                cy: t.start_y,\n                id: o.getNextId(),\n                shape: \"star\",\n                point: i(\"starNumPoints\").value,\n                r: 0,\n                radialshift: i(\"radialShift\").value,\n                r2: 0,\n                orient: \"point\",\n                fill: e,\n                strokecolor: n,\n                strokeWidth: l\n              }\n            }), {\n              started: !0\n            };\n          }\n\n          if (\"polygon\" === o.getMode()) {\n            const e = o.getColor(\"fill\"),\n                  n = o.getColor(\"stroke\"),\n                  l = o.getStrokeWidth();\n            return s = !0, a = o.addSVGElementsFromJson({\n              element: \"polygon\",\n              attr: {\n                cx: t.start_x,\n                cy: t.start_y,\n                id: o.getNextId(),\n                shape: \"regularPoly\",\n                sides: i(\"polySides\").value,\n                orient: \"x\",\n                edge: 0,\n                fill: e,\n                strokecolor: n,\n                strokeWidth: l\n              }\n            }), {\n              started: !0\n            };\n          }\n        },\n\n        mouseMove(t) {\n          if (s) {\n            if (\"star\" === o.getMode()) {\n              const e = Number(a.getAttribute(\"cx\")),\n                    o = Number(a.getAttribute(\"cy\")),\n                    n = Number(a.getAttribute(\"point\")),\n                    i = a.getAttribute(\"orient\"),\n                    l = a.getAttribute(\"fill\"),\n                    s = a.getAttribute(\"strokecolor\"),\n                    r = Number(a.getAttribute(\"strokeWidth\")),\n                    c = Number(a.getAttribute(\"radialshift\"));\n              let u = t.mouse_x,\n                  d = t.mouse_y;\n              const g = Math.sqrt((u - e) * (u - e) + (d - o) * (d - o)) / 1.5,\n                    p = document.getElementById(\"RadiusMultiplier\").value,\n                    b = g / p;\n              a.setAttribute(\"r\", g), a.setAttribute(\"r2\", b), a.setAttribute(\"starRadiusMultiplier\", p);\n              let h = \"\";\n\n              for (let t = 0; n >= t; t++) {\n                let l = 2 * Math.PI * (t / n);\n                \"point\" === i ? l -= Math.PI / 2 : \"edge\" === i && (l = l + Math.PI / n - Math.PI / 2), u = g * Math.cos(l) + e, d = g * Math.sin(l) + o, h += u + \",\" + d + \" \", isNaN(b) || (l = 2 * Math.PI * (t / n) + Math.PI / n, \"point\" === i ? l -= Math.PI / 2 : \"edge\" === i && (l = l + Math.PI / n - Math.PI / 2), l += c, u = b * Math.cos(l) + e, d = b * Math.sin(l) + o, h += u + \",\" + d + \" \");\n              }\n\n              return a.setAttribute(\"points\", h), a.setAttribute(\"fill\", l), a.setAttribute(\"stroke\", s), a.setAttribute(\"stroke-width\", r), a.getAttribute(\"shape\"), {\n                started: !0\n              };\n            }\n\n            if (\"polygon\" === o.getMode()) {\n              const e = Number(a.getAttribute(\"cx\")),\n                    o = Number(a.getAttribute(\"cy\")),\n                    n = Number(a.getAttribute(\"sides\")),\n                    i = a.getAttribute(\"fill\"),\n                    l = a.getAttribute(\"strokecolor\"),\n                    s = Number(a.getAttribute(\"strokeWidth\"));\n              let r = t.mouse_x,\n                  c = t.mouse_y;\n              const u = Math.sqrt((r - e) * (r - e) + (c - o) * (c - o)) / 1.5;\n              a.setAttribute(\"edge\", u);\n              const d = u / 2 * cot(Math.PI / n) * sec(Math.PI / n);\n              let g = \"\";\n\n              for (let t = 0; n >= t; t++) {\n                const i = 2 * Math.PI * t / n;\n                r = d * Math.cos(i) + e, c = d * Math.sin(i) + o, g += r + \",\" + c + \" \";\n              }\n\n              return a.setAttribute(\"points\", g), a.setAttribute(\"fill\", i), a.setAttribute(\"stroke\", l), a.setAttribute(\"stroke-width\", s), {\n                started: !0\n              };\n            }\n          }\n        },\n\n        mouseUp() {\n          if (\"star\" === o.getMode()) {\n            return {\n              keep: \"0\" !== a.getAttribute(\"r\"),\n              element: a\n            };\n          }\n\n          if (\"polygon\" === o.getMode()) {\n            return {\n              keep: \"0\" !== a.getAttribute(\"edge\"),\n              element: a\n            };\n          }\n        },\n\n        selectedChanged(t) {\n          l = t.elems;\n          let e = l.length;\n\n          for (; e--;) {\n            const o = l[e];\n            o && \"star\" === o.getAttribute(\"shape\") ? t.selectedElement && !t.multiselected ? (i(\"starNumPoints\").value = o.getAttribute(\"point\"), i(\"radialShift\").value = o.getAttribute(\"radialshift\"), showPanel(!0, \"star\")) : showPanel(!1, \"star\") : o && \"regularPoly\" === o.getAttribute(\"shape\") ? t.selectedElement && !t.multiselected ? (i(\"polySides\").value = o.getAttribute(\"sides\"), showPanel(!0, \"polygon\")) : showPanel(!1, \"polygon\") : (showPanel(!1, \"star\"), showPanel(!1, \"polygon\"));\n          }\n        }\n\n      };\n    })();\n  }\n\n},\n    o = Object.freeze({\n  __proto__: null,\n  default: {\n    name: \"star\",\n    title: \"Polygone/Star Tool\",\n    buttons: [{\n      title: \"Star Tool\"\n    }, {\n      title: \"Polygon Tool\"\n    }],\n    contextTools: [{\n      title: \"Number of Sides\",\n      label: \"points\"\n    }, {\n      title: \"Pointiness\",\n      label: \"Pointiness\"\n    }, {\n      title: \"Twists the star\",\n      label: \"Radial Shift\"\n    }, {\n      title: \"Number of Sides\",\n      label: \"sides\"\n    }]\n  }\n}),\n    n = Object.freeze({\n  __proto__: null,\n  default: {\n    name: \"etoile\",\n    title: \"Outil Polygone/Etoile\",\n    buttons: [{\n      title: \"Outil Etoile\"\n    }, {\n      title: \"Outil Polygone\"\n    }],\n    contextTools: [{\n      title: \"Nombre de côtés\",\n      label: \"points\"\n    }, {\n      title: \"Précision\",\n      label: \"Précision\"\n    }, {\n      title: \"Torsion Etoile\",\n      label: \"Décalage Radial\"\n    }, {\n      title: \"Nombre de côtés\",\n      label: \"côtés\"\n    }]\n  }\n}),\n    i = Object.freeze({\n  __proto__: null,\n  default: {\n    name: \"星形\",\n    title: \"Polygone/Star Tool\",\n    buttons: [{\n      title: \"星形工具\"\n    }, {\n      title: \"多边形工具\"\n    }],\n    contextTools: [{\n      title: \"顶点\",\n      label: \"顶点\"\n    }, {\n      title: \"钝度\",\n      label: \"钝度\"\n    }, {\n      title: \"径向\",\n      label: \"径向\"\n    }, {\n      title: \"边数\",\n      label: \"边数\"\n    }]\n  }\n});\nexport { e as default }; //# sourceMappingURL=ext-polystar.js.map","map":null,"metadata":{},"sourceType":"module"}